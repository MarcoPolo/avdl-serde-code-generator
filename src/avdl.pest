alpha = _{ 'a'..'z' | 'A'..'Z' }
digit = _{ '0'..'9' }
whitespace = { " " }
newline = _{ NEWLINE }
whitespaces = { (whitespace | newline)* }
WHITESPACE = _{ (" " | NEWLINE) }
comment = @{ "//" ~ (!"\n" ~ ANY)* ~ newline ~ (" "+ ~ comment)* }
COMMENT = _{ ("/*" ~ (!"*/" ~ ANY)* ~ "*/") | comment }

lax_ident = @{ (alpha | digit | "." | "_" | "-")+ }
ident = @{ alpha ~ (alpha | digit | "_" | "-")* }
ns_ident = @{ ident ~ ("." ~ ident)* }
lax_ns_ident = @{ ident ~ ("." ~ lax_ident)* }

maybe_ty = {"union" ~ "{" ~ "null" ~ "," ~ simple_ty ~ "}"}
union_ty = {"union" ~ "{" ~ ty ~ ("," ~ ty)* ~ "}"}
simple_ty = ${ ns_ident ~ ("<" ~ ty ~ ("," ~ WHITESPACE* ~ ty)* ~ ">")? }
ty = { (maybe_ty | union_ty | simple_ty ) }
namespace_name = { lax_ns_ident }
path = { ((".." | ".")? ~ "/")* ~ (lax_ident ~ "/")* ~ lax_ident }

enum_case = ${ident ~ ","? ~ (" "+ ~ comment)? }
enum_ty = { "enum" ~ ident ~ "{" ~ (enum_case | comment)* ~ "}"}

variant_case = {("case" ~ ident | ident) ~ ":" ~ ty ~ ";" ~ comment? }
variant_param = ${ ty ~ WHITESPACE ~ ident }
variant_ty = { "variant" ~ ident ~ "switch" ~ "(" ~ variant_param  ~ ")" ~ "{" ~ variant_case* ~ "}"}

byte_size = @{ digit* }
fixed_ty = { "fixed" ~ ty ~ "(" ~ byte_size ~ ")" ~ ";" }

record = { "record " ~ ty ~ "{" ~ (record_prop | comment)* ~ "}"}
record_prop = { (lint | generic_annotation)* ~ ty ~ ident ~ ";" }

namespace_annotation = ${ "@namespace" ~ "(\"" ~ namespace_name ~ "\")" }
generic_annotation = { "@" ~ ident ~ "(" ~ ("true" | "false" | digit+ | "\"" ~ lax_ident? ~ ("," ~ lax_ident)* ~ "\"") ~ ")" }
lint = { "@lint(\"" ~ ident ~ "\")" }
typedef = { "@typedef(\"" ~ ty ~ "\")" ~ lint? ~ record }

namespace = { "@namespace(\"" ~ namespace_name ~ "\")" ~  "protocol" ~ ident ~ "{" ~ newline* ~ "}" }

// import_idl_path = @{"\"" ~ path ~ "\""}
import = { "import" ~ ty ~ "\"" ~ path ~ "\"" ~ ("as" ~ ty)? ~ ";"}

interface_fn_param = { ty ~ ident ~ ("=" ~ ty)? }
interface_fn_params = { interface_fn_param ~ ("," ~ interface_fn_param)*}
interface_fn = { whitespace* ~ ty ~ ty ~ "(" ~ interface_fn_params? ~ ")" ~ ident? ~ ";" }


protocol_body = { (comment | import | typedef | generic_annotation | record | enum_ty | variant_ty | fixed_ty | interface_fn)* }
protocol_name = { ident }

protocol = {"protocol" ~ protocol_name ~ "{" ~ protocol_body ~ "}" }

avdl_protocol = { WHITESPACE* ~ namespace_annotation? ~ generic_annotation* ~ protocol }
